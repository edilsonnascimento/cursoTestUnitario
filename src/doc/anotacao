Definição

1 - O que são testes unitários?
Avalia a menor porção do código o métodos.
Devendo isolar as dependencias externas.
Divido em cenário, ação e verificação.

2 - FIRST(Fast, Idependent, Isolado, Repeatable, Self-Virifying, Timely).
Timely: criado no tempo correto.

3 - JUnit
Framework para testes unitários.

4 - Rules
Utilizado quando temos mais de um assert no mesmo teste unitários.
Alterar comportamento dos testes.
@Rule
public ErrorCollector error = new ErrorCollector();
Altera comportamento de erros.
@Rule
public ExpectedException exception = ExpectedException.none();

5 - Teste de Exceptions
- Elegante: captura apenas a exceptions, não usa a mensagem da exception, portando deve ter uma exceptions especifica;
- Nova: captura mensagem e exceptin, porem tem menos controles que a Robusta;
- Robusta: captura mensagem e exceptin, pode continuar os testes, mais controle do teste.

6 - Before e After
São métodos executados antes e depois a cada teste, caso a variável se estatica ela não é instaciada a cada teste.
BeforeClass: método estatico executado antes de tudo.
AfterClass: método estatico executado antes de tudo.

7 - Ordem de teste
Anotar a classe com @FixMethodOrder(MethodSorters.NAME_ASCENDING)
Colocar o nome dos metodos em ordem alfabética.

8 - TDD
Teste primeiro Depos Desenlvolva.

9 - @Ignore
@Ignore: ignorar o teste manualmente
Assume.assumeFalse(DataUtils.verificarDiaSemana(new Date(), Calendar.SUNDAY));
Ignira o teste no sabado.

10 - Data-driven testing
Teste orientado a dados, também conhecido como teste orientado a tabela ou teste parametrizado.

11 - Matchers Próprios
Utilzado para centralizar alguma regra ou melhorar a legibilidade dos testes.

12 - Suite de Teste
Agrupa todos os testes em uma classe.
Pode colocar um @Before e @Afther antes das classes que estão na suite de teste.

13 - Builders
Utilizados para facilitar a crição de cenários de testes.

14 - BuilderMater.java
Lib para geração de classes builder.

15 - Métricas
Cobertura de código e todos os testes rodados usar Coverd do Intellij executadondo por classe de teste.

16 - Testes não devem ter dependencias.
Mesmo que acesso a camada DAO não deve haver dependencia de banco de dados, rede, serviços externos.
Pode ser Mokcado.

17 - Mokito
Mokando classe DAO.

18 - Mokito.when()
Alterando o comportamento da classe.

19 - Mokito.verify()
Verificar se um objeto mokado foi realmente chamado.

20 - Mokito.verify() part 2
//verifica enviarEmail foi chamado para usuario3
  verify(enviarEmail).notificarAtraso(usuario3);
//enviarEmail nunca deve ser chamada para usuário 2
  verify(enviarEmail, never()).notificarAtraso(usuario2);
//nao deve ter mais intereções do método
  verifyNoMoreInteractions(enviarEmail);
//não deve invocar o método scp
  verifyZeroInteractions(scpService);
//Verifica a quantidade de chamadas do método enviar email
  verify(enviarEmail, times(3)).notificarAtraso(any());

21 - Anotações
@Mock: mocka dependencias da classe.
@InjectMocks: cria uma instancia mockada.
MockitoAnnotations.initMocks(this): ativa as Anotações.

22 - Excpetion When
Alterando o comportamento do mock para retornar uma excecao.
when(spcService.possuiNegativacao(usuario)).thenThrow(new Exception("Falha no Serviço SPC!"));

23 - Capturando argumentos
Captura instancias dentro do método testado
1 - Declara um ArgumentCaptor
ArgumentCaptor<Locacao> locacaoCaptor = ArgumentCaptor.forClass(Locacao.class);
2 - Executa a ação
service.prorrogarLocacao(locacao, dias);
3 - Chama verify passando locacaoCaptor por argumento.
verify(dao).salvar(locacaoCaptor.capture());
4 - Atribuir o valor capturado a outro objeto
Locacao novaLocacao = locacaoCaptor.getValue();
5 - Criar asserts do valor capturado.

24 - Spy
Semelhante ao Mock funciona para classes concretas.
Quando não sabe o que fazer retorna o resultado do métdo não o valor padrão como o Mock.

25 - PowerMockito
Mockar construtor do objeto.
Alterar comportamento de objetos estaticos
Metodos privados
Frameork extende ao mockito e resolve os problemas acima.

26 - PowerMockito métos privados.
Mockando métodos privados.
PowerMockito.doReturn(obterDataComDiferencaDias(5)).when(service, "calculaDataEntrega");

27 - PowerMockito testando métodos privados
 //ação
Date dataRetorno = Whitebox.invokeMethod(service, "calculaDataEntrega");
 //verificação
assertThat(DataUtils.isMesmaData(dataRetorno, obterDataComDiferencaDias(1)), is(true));

28 - Sem utilizar PoweMockito
Utilizando Reflexao do java e Spy para não utilizar mockito